---
import { ViewTransitions } from 'astro:transitions';
import { getStoredTheme, getHue } from '../lib/settings-utils';
import ThemeCustomizer from '../components/ThemeCustomizer';

interface Props {
	title: string;
}

const { title } = Astro.props;
const initialTheme = getStoredTheme();
const initialHue = getHue();
---

<!doctype html>
<html lang="en" class={initialTheme}>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body>
		<div id="theme-provider" data-theme={initialTheme} data-hue={initialHue}>
			<header class="p-4 bg-primary-100 dark:bg-primary-900">
				<div class="container mx-auto flex justify-between items-center">
					<h1 class="text-2xl font-bold text-primary-900 dark:text-primary-100">Your Site Name</h1>
					<ThemeCustomizer client:load />
				</div>
			</header>
			<main class="container mx-auto p-4">
				<slot />
			</main>
		</div>
		<script>
			import { applyThemeToDocument } from '../lib/settings-utils';
			
			function updateTheme() {
				const themeProvider = document.getElementById('theme-provider');
				if (themeProvider) {
					const theme = themeProvider.dataset.theme;
					const hue = themeProvider.dataset.hue;
					applyThemeToDocument(theme, parseInt(hue || '250', 10));
				}
			}

			// Run on initial load
			updateTheme();

			// Setup for view transitions
			document.addEventListener('astro:after-swap', updateTheme);

			// Listen for theme changes
			window.addEventListener('theme-change', updateTheme);
		</script>
	</body>
</html>

<style is:global>
	:root {
		--primary-hue: 250;
		color-scheme: light dark;
	}

	body {
		font-family: system-ui, sans-serif;
		background-color: hsl(var(--primary-hue) 20% 95%);
		color: hsl(var(--primary-hue) 20% 20%);
	}

	.dark body {
		background-color: hsl(var(--primary-hue) 20% 10%);
		color: hsl(var(--primary-hue) 20% 90%);
	}
</style>
